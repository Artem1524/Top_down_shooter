//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Top_Down_Shooter/Scripts/Controllers/PlayerController/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TDShooter.Controllers
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e098521f-e696-48ad-ab24-b570e5c07527"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""7f2ceae9-9278-489c-89cb-a151447c91af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Value"",
                    ""id"": ""b7352340-5017-4dcb-b8c9-4dab56f4382a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""b01411e4-8020-4d5c-99b4-5b7f6a4ee33c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""c5ba5e97-9c0e-42ce-8eb1-e6b7bb610141"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""25b9c5c6-0c85-4d9a-ba38-6ca123176a6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4fdb296a-115b-4f22-9a21-e218b2647d42"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76361e28-a65a-45bd-a074-d54368efd4e1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""972b9b60-c4a2-4f6b-9cb8-25feaea61540"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af21b13d-ad06-4ce3-a7de-fe555cbf671c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""61a125ab-9ce5-4a36-ab9f-ce9ad66cf8e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""452c6b91-c7fe-4318-b3a7-34656458c0ce"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88e2cc69-a799-41bb-a8c9-b02ede46da4d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""404db18c-89a2-4157-9aaa-8f864d15f0f4"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c2413ce9-bc4a-4e17-a363-e160328f6cde"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f74d4172-1069-4d19-a97f-f5a1f864ca3d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8ee9305-2b27-47b0-9833-b1032149f7e3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e41693c9-d869-4660-ab77-6b8ea0d6f0b7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12f12298-e3f2-4f25-b9cc-53e556aa50b6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e2ec315-a75a-4a71-96de-5b4e0bff2015"",
                    ""path"": ""<Keyboard>/#(1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2302756e-9a9d-44a6-90bc-88125979b1d3"",
                    ""path"": ""<Keyboard>/#(2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fbb95c4-044b-4805-b4f3-4e699b35d888"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a59831fe-a6f0-4914-964b-a4d645191d18"",
                    ""path"": ""<Keyboard>/#(3)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9843254d-d8e5-4fd4-92d8-026a46cc2235"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PicklockGame"",
            ""id"": ""7e973d81-ee49-4c24-ab1c-9ae020fa11e7"",
            ""actions"": [
                {
                    ""name"": ""PicklockGameStartStop"",
                    ""type"": ""Button"",
                    ""id"": ""035f9f61-c235-4da0-86f9-570d857ecf64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PicklockGamePush"",
                    ""type"": ""Button"",
                    ""id"": ""528c3fc7-bb72-46c7-993d-1dd43140a4ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dda56ddb-fe1e-4722-bc20-f052ebca765f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PicklockGameStartStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242ea34c-3d89-4511-92d6-a1d403046af0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PicklockGameStartStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50662511-c66f-45c2-8938-bc2b1c3c4afb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PicklockGamePush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5da2f507-8631-4c31-9194-4f3bc176a00b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PicklockGamePush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Moving = m_Player.FindAction("Moving", throwIfNotFound: true);
            m_Player_Shooting = m_Player.FindAction("Shooting", throwIfNotFound: true);
            m_Player_SwitchWeapon1 = m_Player.FindAction("SwitchWeapon1", throwIfNotFound: true);
            m_Player_SwitchWeapon2 = m_Player.FindAction("SwitchWeapon2", throwIfNotFound: true);
            m_Player_SwitchWeapon3 = m_Player.FindAction("SwitchWeapon3", throwIfNotFound: true);
            // PicklockGame
            m_PicklockGame = asset.FindActionMap("PicklockGame", throwIfNotFound: true);
            m_PicklockGame_PicklockGameStartStop = m_PicklockGame.FindAction("PicklockGameStartStop", throwIfNotFound: true);
            m_PicklockGame_PicklockGamePush = m_PicklockGame.FindAction("PicklockGamePush", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Moving;
        private readonly InputAction m_Player_Shooting;
        private readonly InputAction m_Player_SwitchWeapon1;
        private readonly InputAction m_Player_SwitchWeapon2;
        private readonly InputAction m_Player_SwitchWeapon3;
        public struct PlayerActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Moving => m_Wrapper.m_Player_Moving;
            public InputAction @Shooting => m_Wrapper.m_Player_Shooting;
            public InputAction @SwitchWeapon1 => m_Wrapper.m_Player_SwitchWeapon1;
            public InputAction @SwitchWeapon2 => m_Wrapper.m_Player_SwitchWeapon2;
            public InputAction @SwitchWeapon3 => m_Wrapper.m_Player_SwitchWeapon3;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
                @Shooting.started += instance.OnShooting;
                @Shooting.performed += instance.OnShooting;
                @Shooting.canceled += instance.OnShooting;
                @SwitchWeapon1.started += instance.OnSwitchWeapon1;
                @SwitchWeapon1.performed += instance.OnSwitchWeapon1;
                @SwitchWeapon1.canceled += instance.OnSwitchWeapon1;
                @SwitchWeapon2.started += instance.OnSwitchWeapon2;
                @SwitchWeapon2.performed += instance.OnSwitchWeapon2;
                @SwitchWeapon2.canceled += instance.OnSwitchWeapon2;
                @SwitchWeapon3.started += instance.OnSwitchWeapon3;
                @SwitchWeapon3.performed += instance.OnSwitchWeapon3;
                @SwitchWeapon3.canceled += instance.OnSwitchWeapon3;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Moving.started -= instance.OnMoving;
                @Moving.performed -= instance.OnMoving;
                @Moving.canceled -= instance.OnMoving;
                @Shooting.started -= instance.OnShooting;
                @Shooting.performed -= instance.OnShooting;
                @Shooting.canceled -= instance.OnShooting;
                @SwitchWeapon1.started -= instance.OnSwitchWeapon1;
                @SwitchWeapon1.performed -= instance.OnSwitchWeapon1;
                @SwitchWeapon1.canceled -= instance.OnSwitchWeapon1;
                @SwitchWeapon2.started -= instance.OnSwitchWeapon2;
                @SwitchWeapon2.performed -= instance.OnSwitchWeapon2;
                @SwitchWeapon2.canceled -= instance.OnSwitchWeapon2;
                @SwitchWeapon3.started -= instance.OnSwitchWeapon3;
                @SwitchWeapon3.performed -= instance.OnSwitchWeapon3;
                @SwitchWeapon3.canceled -= instance.OnSwitchWeapon3;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // PicklockGame
        private readonly InputActionMap m_PicklockGame;
        private List<IPicklockGameActions> m_PicklockGameActionsCallbackInterfaces = new List<IPicklockGameActions>();
        private readonly InputAction m_PicklockGame_PicklockGameStartStop;
        private readonly InputAction m_PicklockGame_PicklockGamePush;
        public struct PicklockGameActions
        {
            private @PlayerControls m_Wrapper;
            public PicklockGameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PicklockGameStartStop => m_Wrapper.m_PicklockGame_PicklockGameStartStop;
            public InputAction @PicklockGamePush => m_Wrapper.m_PicklockGame_PicklockGamePush;
            public InputActionMap Get() { return m_Wrapper.m_PicklockGame; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PicklockGameActions set) { return set.Get(); }
            public void AddCallbacks(IPicklockGameActions instance)
            {
                if (instance == null || m_Wrapper.m_PicklockGameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PicklockGameActionsCallbackInterfaces.Add(instance);
                @PicklockGameStartStop.started += instance.OnPicklockGameStartStop;
                @PicklockGameStartStop.performed += instance.OnPicklockGameStartStop;
                @PicklockGameStartStop.canceled += instance.OnPicklockGameStartStop;
                @PicklockGamePush.started += instance.OnPicklockGamePush;
                @PicklockGamePush.performed += instance.OnPicklockGamePush;
                @PicklockGamePush.canceled += instance.OnPicklockGamePush;
            }

            private void UnregisterCallbacks(IPicklockGameActions instance)
            {
                @PicklockGameStartStop.started -= instance.OnPicklockGameStartStop;
                @PicklockGameStartStop.performed -= instance.OnPicklockGameStartStop;
                @PicklockGameStartStop.canceled -= instance.OnPicklockGameStartStop;
                @PicklockGamePush.started -= instance.OnPicklockGamePush;
                @PicklockGamePush.performed -= instance.OnPicklockGamePush;
                @PicklockGamePush.canceled -= instance.OnPicklockGamePush;
            }

            public void RemoveCallbacks(IPicklockGameActions instance)
            {
                if (m_Wrapper.m_PicklockGameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPicklockGameActions instance)
            {
                foreach (var item in m_Wrapper.m_PicklockGameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PicklockGameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PicklockGameActions @PicklockGame => new PicklockGameActions(this);
        public interface IPlayerActions
        {
            void OnMoving(InputAction.CallbackContext context);
            void OnShooting(InputAction.CallbackContext context);
            void OnSwitchWeapon1(InputAction.CallbackContext context);
            void OnSwitchWeapon2(InputAction.CallbackContext context);
            void OnSwitchWeapon3(InputAction.CallbackContext context);
        }
        public interface IPicklockGameActions
        {
            void OnPicklockGameStartStop(InputAction.CallbackContext context);
            void OnPicklockGamePush(InputAction.CallbackContext context);
        }
    }
}
